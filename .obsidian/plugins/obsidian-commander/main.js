/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var os = require('os');
var fs = require('fs');
var path = require('path');
var child_process = require('child_process');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var os__namespace = /*#__PURE__*/_interopNamespace(os);
var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
var path__namespace = /*#__PURE__*/_interopNamespace(path);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

obsidian.addIcon('stop', `
<rect
  style="fill:none;fill-opacity:1;stroke:currentColor;stroke-width:5.0125947;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
  id="rect825"
  width="89.674904"
  height="88.737404"
  x="5.1625481"
  y="5.6312981" />
`);
obsidian.addIcon('add', `
<path
  style="fill:none;stroke:currentColor;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
  d="M 86.228814,51.271186 H 9.9576265"
  id="path817"
  inkscape:connector-curvature="0" 
/>
<path
  inkscape:connector-curvature="0"
  id="path834"
  d="M 48.09322,89.40678 V 13.135592"
  style="fill:none;stroke:currentColor;stroke-width:10;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" 
/>
`);
obsidian.addIcon('run', `
<path fill="currentColor" stroke="currentColor" d="M37,16c-4.4,0-8.3,3.3-9.2,7.6l-11.6,52c-0.5,2.2,0,4.3,1.2,5.9c1.2,1.6,3.2,2.6,5.4,2.6H79c4.4,0,8.3-3.3,9.2-7.6 l11.6-52c0.5-2.2,0-4.3-1.2-5.9C97.4,17,95.4,16,93.2,16L37,16z M37,20h56.2c1.1,0,1.8,0.4,2.2,1c0.5,0.6,0.7,1.4,0.4,2.6l-1,4.4 H30.8l0.8-3.6C32.1,22.2,34.8,20,37,20z M29.9,32H94l-9.6,43.6C83.9,77.8,81.2,80,79,80H22.8c-1.1,0-1.8-0.4-2.2-1 c-0.5-0.6-0.7-1.4-0.4-2.6L29.9,32z M0,36v4h19.6l0.9-4L0,36z M36.7,38c-0.8,0.1-1.4,0.7-1.6,1.5l-3.5,14c-0.2,0.6,0,1.2,0.4,1.7 c0.4,0.5,1,0.8,1.6,0.8H81c0.9,0,1.7-0.6,1.9-1.5l3.5-14c0.2-0.6,0-1.3-0.4-1.8c-0.4-0.5-1-0.8-1.6-0.8H37.1c-0.1,0-0.1,0-0.2,0 C36.9,38,36.8,38,36.7,38L36.7,38z M38.7,42h43.2l-2.4,10H36.2L38.7,42z M0,52v4h16l0.9-4H0z M0,68v4h12.4l0.9-4H0z"></path>
`);
obsidian.addIcon('copy', `
<path fill="currentColor" stroke="currentColor" d="M74,4c-0.1,0-0.2,0-0.3,0H40v11.5l4,4V8h28v20h20v48H64v4h32V26.3c0-0.2,0-0.4,0-0.6v-0.5l-0.4-0.4 c-0.1-0.1-0.2-0.3-0.4-0.4c0,0,0,0,0,0L75.6,4.8c-0.1-0.1-0.2-0.3-0.4-0.4L74.8,4h-0.5C74.2,4,74.1,4,74,4L74,4z M76,10.8L89.2,24 H76V10.8z M38,20c-0.1,0-0.2,0-0.3,0H4v76h56V42.3c0-0.2,0-0.4,0-0.6v-0.5l-0.4-0.4c-0.1-0.1-0.2-0.3-0.4-0.4L39.6,20.7 c-0.1-0.1-0.2-0.3-0.4-0.4L38.8,20h-0.5C38.2,20,38.1,20,38,20z M8,24h28v20h20v48H8L8,24z M40,26.8L53.2,40H40V26.8z M60.5,36 l4,4H84v-4L60.5,36z M64,48v4h12v-4H64z M16,52v4h32v-4H16z M64,60v4h20v-4H64z M16,64v4h24v-4H16z M16,76v4h32v-4H16z"></path>
`);
obsidian.addIcon('console', `
<g
id="g834"
transform="translate(0.95339012,-1.9073486e-6)">
<rect
  y="16.73081"
  x="6.3938694"
  height="66.538383"
  width="85.305481"
  id="rect819"
  style="fill:none;fill-opacity:1;stroke:currentColor;stroke-width:5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
<text
  id="text823"
  y="39.476452"
  x="26.666315"
  style="font-style:normal;font-weight:normal;font-size:235.29411316px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:currentColor;fill-opacity:1;stroke:none;stroke-width:5"
  xml:space="preserve"><tspan
    style="stroke-width:5"
    y="247.6566"
    x="26.666315"
    id="tspan821"
    sodipodi:role="line"></tspan></text>
<path
  inkscape:connector-curvature="0"
  id="path825"
  d="M 19.491525,28.601695 41.525423,49.788135 18.855932,70.762711"
  style="fill:none;stroke:currentColor;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
<path
  inkscape:connector-curvature="0"
  id="path827"
  d="M 49.364407,69.703388 H 74.788135"
  style="fill:none;stroke:currentColor;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
</g>
`);

const CONTENT_PLACEHOLDER = '%CONTENT%';
const FILE_PLACEHOLDER = '%FILE%';
const DEFAULT_SETTINGS = {
    enableStatusBarItem: true,
    enableOutputAutoClear: false,
    enableAutoScroll: true,
    outputMaxLines: 50,
    workingDirectory: os__namespace.tmpdir(),
    scriptTimeout: 300,
    wordsBlacklist: ['sudo'],
    env: {},
    languages: {
        'sh': {
            executable: `sh ${FILE_PLACEHOLDER}`,
            template: `#!/bin/sh${os__namespace.EOL}${os__namespace.EOL}set -e${os__namespace.EOL}${os__namespace.EOL}${CONTENT_PLACEHOLDER}`,
        },
        'bash': {
            executable: `bash ${FILE_PLACEHOLDER}`,
            template: `#!/bin/bash${os__namespace.EOL}${os__namespace.EOL}set -e${os__namespace.EOL}${os__namespace.EOL}${CONTENT_PLACEHOLDER}`,
        },
        'js|javascript': {
            executable: `node ${FILE_PLACEHOLDER}`,
            template: `(async () => {${os__namespace.EOL}  ${CONTENT_PLACEHOLDER}${os__namespace.EOL}})()`,
        },
        'python': {
            executable: `python ${FILE_PLACEHOLDER}`,
            template: CONTENT_PLACEHOLDER,
        },
        'go': {
            executable: `go run ${FILE_PLACEHOLDER}`,
            template: `package main${os__namespace.EOL}${os__namespace.EOL}import ("fmt")${os__namespace.EOL}${os__namespace.EOL}func main() {${os__namespace.EOL}  ${CONTENT_PLACEHOLDER}${os__namespace.EOL}}`,
        },
        'php': {
            executable: `php ${FILE_PLACEHOLDER}`,
            template: `<?php${os__namespace.EOL}${os__namespace.EOL}${CONTENT_PLACEHOLDER}`
        }
    }
};
function getLanguageSettings(settings, type) {
    for (const key in settings.languages) {
        const match = type.match('^' + key + '$');
        if (match !== null) {
            return settings.languages[key];
        }
    }
    return null;
}
function getAllSupportedLanguages(settings) {
    return Object.keys(settings.languages).join('|');
}

const OUTPUT_MIN_LINES = 5;
const OUTPUT_MAX_LINES = 5000;
class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName('Enable status bar item')
            .setDesc('Add a status bar item with running script count')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.enableStatusBarItem)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.enableStatusBarItem = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Enable automatic output clean')
            .setDesc('Clear the output panel content before new executions')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.enableOutputAutoClear)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.enableOutputAutoClear = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Max output lines')
            .setDesc('The max number of lines to show in output panel')
            .addText(text => text
            .setValue(this.plugin.settings.outputMaxLines.toString())
            .onChange((text) => __awaiter(this, void 0, void 0, function* () {
            let value = parseInt(text);
            if (value < OUTPUT_MIN_LINES) {
                value = OUTPUT_MIN_LINES;
            }
            else if (value > OUTPUT_MAX_LINES) {
                value = OUTPUT_MAX_LINES;
            }
            this.plugin.settings.outputMaxLines = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Working directory')
            .setDesc('The path where code scripts are executed')
            .addText(text => text
            .setValue(this.plugin.settings.workingDirectory)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.workingDirectory = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Script timeout')
            .setDesc('Execution timeout in seconds, 0 to disable')
            .addDropdown(dropdown => dropdown
            .addOptions({
            '0': 'disabled',
            '60': '1 minute',
            '300': '5 minutes',
            '600': '10 minutes',
            '1800': '30 minutes',
        })
            .setValue(this.plugin.settings.scriptTimeout.toString())
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.scriptTimeout = parseInt(value);
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Words blacklist')
            .setDesc('Block code execution that match these words (one per line)')
            .addTextArea(textArea => textArea
            .setValue(this.plugin.settings.wordsBlacklist.join(os__namespace.EOL))
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.wordsBlacklist = value.split(os__namespace.EOL);
            yield this.plugin.saveSettings();
        })));
        containerEl.createEl('h3', { text: 'Environment variables', cls: ['commander-settings-title'] });
        const envEl = window.createDiv();
        for (const key in this.plugin.settings.env) {
            this.addEnvVariableSettings(envEl, key);
        }
        containerEl.appendChild(envEl);
        let envTextComponent;
        new obsidian.Setting(containerEl)
            .setName('Add env variable')
            .setDesc('The key must correspond to code block type')
            .addText(text => {
            envTextComponent = text;
            text.setPlaceholder('EXAMPLE_ENV_VAR');
        })
            .addExtraButton(btn => btn
            .setIcon('add')
            .setTooltip('Add a env variable')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            const key = envTextComponent.getValue();
            if (key.trim().length === 0) {
                return;
            }
            this.plugin.settings.env[key] = '';
            yield this.plugin.saveSettings();
            this.addEnvVariableSettings(envEl, envTextComponent.getValue());
            envTextComponent.setValue('');
        })));
        containerEl.createEl('h3', { text: 'Supported languages', cls: ['commander-settings-title'] });
        const languagesEl = window.createDiv();
        for (const key in this.plugin.settings.languages) {
            this.addLanguageSettings(languagesEl, key);
        }
        containerEl.appendChild(languagesEl);
        let langTextComponent;
        new obsidian.Setting(containerEl)
            .setName('Add new language support')
            .setDesc('The key must correspond to code block type')
            .addText(text => {
            langTextComponent = text;
            text.setPlaceholder('js|javascript');
        })
            .addExtraButton(btn => btn
            .setIcon('add')
            .setTooltip('Add a new language')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            const key = langTextComponent.getValue();
            if (key.trim().length === 0) {
                return;
            }
            this.plugin.settings.languages[key] = {
                executable: key.split('|').shift() + ' ' + FILE_PLACEHOLDER,
                template: CONTENT_PLACEHOLDER
            };
            yield this.plugin.saveSettings();
            this.addLanguageSettings(languagesEl, langTextComponent.getValue());
            langTextComponent.setValue('');
        })));
    }
    addEnvVariableSettings(containerEl, key) {
        const settingsContainer = containerEl.createEl('div', { cls: ['commander-env-settings'] });
        new obsidian.Setting(settingsContainer)
            .setName(key)
            .addText(text => text
            .setValue(this.plugin.settings.env[key])
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.env[key] = value;
            yield this.plugin.saveSettings();
        })))
            .addExtraButton(btn => btn
            .setIcon('trash')
            .setTooltip('Delete env variable')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            settingsContainer.remove();
            delete this.plugin.settings.env[key];
            yield this.plugin.saveSettings();
        })));
    }
    addLanguageSettings(containerEl, key) {
        const settingsContainer = containerEl.createEl('div', { cls: ['commander-lang-settings'] });
        const settingsHeader = settingsContainer.createEl('div', { cls: ['commander-lang-settings-header'] });
        settingsHeader.createEl('h3', { text: key.replace(/\|/g, ' ') });
        new obsidian.Setting(settingsHeader)
            .addButton(btn => btn
            .setIcon('trash')
            .setClass('commander-lang-delete-btn')
            .setTooltip('Delete language')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            settingsContainer.remove();
            delete this.plugin.settings.languages[key];
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(settingsContainer)
            .setName('Executable')
            .addText(text => text
            .setPlaceholder('exec ' + FILE_PLACEHOLDER)
            .setValue(this.plugin.settings.languages[key].executable)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.languages[key].executable = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(settingsContainer)
            .setName('Template')
            .addTextArea(textArea => textArea
            .setPlaceholder(CONTENT_PLACEHOLDER)
            .setValue(this.plugin.settings.languages[key].template)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.languages[key].template = value;
            yield this.plugin.saveSettings();
        })));
    }
}

const ARG_REGEX_QUOTED = /^"[^"]*"$/;
const ARG_REGEX = /^([^"]|[^"].*?[^"])$/;
class Script {
    constructor(plugin) {
        this.plugin = plugin;
    }
    setType(type) {
        this.type = type;
    }
    addContent(content) {
        if (!this.content) {
            this.content = content;
        }
        else {
            this.content += '\n' + content;
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                if (this.plugin.settings.enableOutputAutoClear && this.plugin.outputView) {
                    this.plugin.outputView.clear();
                }
                const langSettings = getLanguageSettings(this.plugin.settings, this.type);
                if (!langSettings) {
                    return reject('Language not supported');
                }
                // Check blacklisted words
                const block = this.plugin.settings.wordsBlacklist.some(words => this.content.includes(words));
                if (block) {
                    const msg = 'Script execution blocked';
                    new obsidian.Notice(msg);
                    return reject(msg);
                }
                // Write code script file on disk
                const fileName = `${(new Date()).getTime()}.${this.type}`;
                const filePath = path__namespace.join(this.plugin.settings.workingDirectory, fileName);
                let fileContent = this.content;
                if (langSettings.template) {
                    fileContent = langSettings.template.replace(CONTENT_PLACEHOLDER, fileContent);
                }
                fs__namespace.writeFileSync(filePath, fileContent);
                // Prepare command and arguments
                const cmd = langSettings.executable.replace(FILE_PLACEHOLDER, fileName);
                const args = [];
                let argPart = '';
                cmd.split(' ').forEach((arg) => {
                    if ((ARG_REGEX_QUOTED.test(arg) || ARG_REGEX.test(arg)) && !argPart) {
                        args.push(arg);
                    }
                    else {
                        argPart = argPart ? argPart + ' ' + arg : arg;
                        if (argPart.endsWith('')) {
                            args.push(argPart);
                            argPart = '';
                        }
                    }
                });
                const executable = args.shift();
                if (!executable) {
                    return reject('No executable found in file placeholder');
                }
                // Execute command
                this.command = child_process.spawn(executable, args, {
                    cwd: this.plugin.settings.workingDirectory,
                    timeout: this.plugin.settings.scriptTimeout * 1000,
                    env: Object.assign(Object.assign({}, process.env), this.plugin.settings.env),
                });
                // Attach to process events
                this.command.stdout.on('data', (data) => {
                    this.print(data.toString());
                });
                this.command.stderr.on('data', (data) => {
                    this.print(data.toString());
                });
                this.command.on('error', (error) => {
                    this.print(error.message);
                    // Check if command didn't start
                    // (for example due an ENOENT error)
                    if (!this.command.pid) {
                        reject(error.message);
                    }
                });
                this.command.on('exit', (code) => {
                    fs__namespace.unlinkSync(filePath);
                    if (code !== 0) {
                        if (code === null) {
                            this.print('stopped');
                        }
                        else {
                            this.print(`exit code ${code}`);
                        }
                        reject(code);
                    }
                    else {
                        resolve();
                    }
                });
            });
        });
    }
    print(msg) {
        if (this.plugin.outputView) {
            this.plugin.outputView.print(msg);
        }
    }
}

// https://github.com/chalk/ansi-regex/blob/main/index.js#L3
const ANSI_CODE_REGEX = [
    '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
    '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
].join('|');
const VIEW_TYPE_OUTPUT = 'commander-output';
class OutputView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
    }
    getViewType() {
        return VIEW_TYPE_OUTPUT;
    }
    getDisplayText() {
        return 'Commander';
    }
    getIcon() {
        return 'console';
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            const { containerEl } = this;
            containerEl.empty();
            const buttonContainer = document.createElement('div');
            buttonContainer.addClass('nav-header');
            buttonContainer.addClass('commander-header');
            containerEl.appendChild(buttonContainer);
            new obsidian.ButtonComponent(buttonContainer)
                .setIcon('copy')
                .setTooltip('Copy output')
                .onClick(() => {
                this.copyContentToClipboard();
            });
            new obsidian.ButtonComponent(buttonContainer)
                .setIcon('cross')
                .setTooltip('Clear output')
                .onClick(() => {
                this.clear();
            });
            new obsidian.ButtonComponent(buttonContainer)
                .setIcon('stop')
                .setTooltip('Stop running scripts')
                .onClick(() => {
                if (this.plugin.runningScripts.length > 0) {
                    this.plugin.stopAllRunningScripts();
                }
            });
            this.outputElem = document.createElement('pre');
            this.outputElem.addClass('commander-output');
            containerEl.appendChild(this.outputElem);
        });
    }
    clear() {
        this.outputElem.innerHTML = '';
    }
    copyContentToClipboard() {
        navigator.clipboard.writeText(this.outputElem.innerHTML.replace(/<br>/g, os__namespace.EOL));
    }
    print(msg) {
        msg = msg.replace(new RegExp(ANSI_CODE_REGEX, 'g'), ''); // remove ANSI control codes
        msg = msg.replace(new RegExp(os__namespace.EOL, 'g'), '<br>'); // replace enw line with br
        if (this.outputElem.innerHTML.length > 0 && this.outputElem.innerHTML.endsWith('<br>') === false) {
            this.outputElem.innerHTML += '<br>';
        }
        this.outputElem.innerHTML += msg;
        this.checkMaxLines();
        this.checkScroll();
    }
    checkMaxLines() {
        let lines = this.outputElem.innerHTML.split('<br>');
        const overLimit = lines.length - this.plugin.settings.outputMaxLines;
        if (overLimit <= 0) {
            return;
        }
        lines = lines.slice(overLimit - 1);
        this.outputElem.innerHTML = lines.join('<br>');
    }
    checkScroll() {
        if (!this.plugin.settings.enableAutoScroll) {
            return;
        }
        this.outputElem.scrollTop = this.outputElem.scrollHeight;
    }
}

class CommanderPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new SettingTab(this.app, this));
            if (this.settings.enableStatusBarItem) {
                this.initStatusBarItem();
            }
            this.registerInterval(window.setInterval(() => {
                if (this.statusBarItem) {
                    this.statusBarItem.setText(`${this.runningScripts.length} running scripts`);
                }
            }, 1000));
            this.registerView(VIEW_TYPE_OUTPUT, (leaf) => {
                this.outputView = new OutputView(leaf, this);
                return this.outputView;
            });
            this.addCommand({
                id: 'app:show-commander-output',
                name: 'Show console output',
                callback: () => this.initLeaf(),
                hotkeys: []
            });
            this.addCommand({
                id: 'app:clean-commander-scripts',
                name: 'Clean console output',
                callback: () => {
                    if (this.outputView) {
                        this.outputView.clear();
                    }
                },
                hotkeys: []
            });
            this.addCommand({
                id: 'app:copy-commander-scripts',
                name: 'Copy console output',
                callback: () => {
                    if (this.outputView) {
                        this.outputView.copyContentToClipboard();
                        new obsidian.Notice('Console output copied!');
                    }
                },
                hotkeys: []
            });
            this.addCommand({
                id: 'app:stop-commander-scripts',
                name: 'Stop all commands',
                callback: () => {
                    const scriptCount = this.runningScripts.length;
                    if (scriptCount === 0) {
                        new obsidian.Notice('No running scrips found');
                        return;
                    }
                    this.stopAllRunningScripts();
                    new obsidian.Notice(`${scriptCount} scripts stopped`);
                },
                hotkeys: []
            });
            this.runningScripts = [];
            this.registerMarkdownPostProcessor(this.postProcessor.bind(this));
        });
    }
    initStatusBarItem() {
        if (this.statusBarItem) {
            return;
        }
        this.statusBarItem = this.addStatusBarItem();
    }
    clearStatusBarItem() {
        if (!this.statusBarItem) {
            return;
        }
        this.statusBarItem.remove();
        this.statusBarItem = null;
    }
    initLeaf() {
        const { workspace } = this.app;
        if (workspace.getLeavesOfType(VIEW_TYPE_OUTPUT).length > 0) {
            return;
        }
        const leaf = workspace.getRightLeaf(false);
        if (!leaf) {
            return;
        }
        leaf.setViewState({
            type: VIEW_TYPE_OUTPUT,
            active: true,
        });
    }
    clearLeaf() {
        const { workspace } = this.app;
        workspace
            .getLeavesOfType(VIEW_TYPE_OUTPUT)
            .forEach((leaf) => leaf.detach());
    }
    postProcessor(el) {
        const codeBlocks = Array.from(el.querySelectorAll('code'));
        if (!codeBlocks.length) {
            return;
        }
        const supportedLanguages = getAllSupportedLanguages(this.settings);
        for (const codeBlock of codeBlocks) {
            const supportedLang = Array.from(codeBlock.classList).find(cls => {
                const match = cls.match('^language-(' + supportedLanguages + ')$');
                return match !== null;
            });
            if (!supportedLang) {
                continue;
            }
            const script = new Script(this);
            script.addContent(codeBlock.getText());
            script.setType(supportedLang.replace('language-', ''));
            codeBlock.parentElement.parentElement.addClass('commander-block-relative');
            this.createButton(script, codeBlock.parentElement);
        }
    }
    createButton(script, parent) {
        const runBtn = new obsidian.ButtonComponent(parent)
            .setButtonText('Execute')
            .setClass('execute-code-button')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            runBtn.setDisabled(true);
            this.runningScripts.push(script);
            try {
                yield script.run();
            }
            finally {
                this.runningScripts.splice(this.runningScripts.indexOf(script), 1);
                runBtn.setDisabled(false);
            }
        }));
    }
    stopAllRunningScripts() {
        for (const script of this.runningScripts) {
            script.command.kill();
        }
        this.runningScripts = [];
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.settings.enableStatusBarItem) {
                this.initStatusBarItem();
            }
            else {
                this.clearStatusBarItem();
            }
            yield this.saveData(this.settings);
        });
    }
    onunload() {
        this.clearLeaf();
        this.stopAllRunningScripts();
    }
}

module.exports = CommanderPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
